import * as THREE from "three";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js";

// üé¨ –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ü–µ–Ω–∞
const scene = new THREE.Scene();

// üé• –ö–∞–º–µ—Ä–∞
const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 100);
camera.position.set(0, 2, 5);

// üé® –†–µ–Ω–¥–µ—Ä–µ—Ä —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç
const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.setPixelRatio(window.devicePixelRatio);
document.body.appendChild(renderer.domElement);

// üí° –î–æ–±–∞–≤—è–º–µ HDR –æ–∫–æ–ª–Ω–æ –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ (IBL)
new RGBELoader().load("textures/studio.hdr", function (texture) {
    texture.mapping = THREE.EquirectangularReflectionMapping;
    scene.environment = texture;
    scene.background = null; // –ó–∞–ø–∞–∑–≤–∞ –ø—Ä–æ–∑—Ä–∞—á–µ–Ω —Ñ–æ–Ω
});

// üî• –û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ
const ambientLight = new THREE.AmbientLight(0xffffff, 1.5);
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 3);
directionalLight.position.set(5, 5, 5);
scene.add(directionalLight);

//const pointLight = new THREE.PointLight(0xffffff, 1, 10);
//pointLight.position.set(2, 2, 2);
//scene.add(pointLight);

// üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–∏ –∑–∞ –≤—ä—Ä—Ç–µ–Ω–µ
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

// üì¶ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ 3D –º–æ–¥–µ–ª–∞
const loader = new GLTFLoader();
const textureLoader = new THREE.TextureLoader();

loader.load("models/ring.glb", (gltf) => {
    const ring = gltf.scene;
    scene.add(ring);

    let metalMaterial = null;
    let stoneMaterial = null;

    // üîç –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏ –ø–æ –∏–º–µ
    ring.traverse((child) => {
        if (child.isMesh) {
            if (child.material.name === "Metal") {
                metalMaterial = new THREE.MeshPhysicalMaterial({
                    map: textureLoader.load("textures/metal_gold.jpg"), // –ù–∞—á–∞–ª–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –∑–∞ –∑–ª–∞—Ç–æ
                    metalness: 1.0, // –ü—ä–ª–µ–Ω –º–µ—Ç–∞–ª
                    roughness: 0.1, // –ú–Ω–æ–≥–æ –≥–ª–∞–¥—ä–∫
                    envMapIntensity: 4.0, // –ú–Ω–æ–≥–æ —Å–∏–ª–Ω–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ
                    clearcoat: 1.0, // Clearcoat —Å–ª–æ–π
                    clearcoatRoughness: 0.1, // –ú–Ω–æ–≥–æ –≥–ª–∞–¥—ä–∫ clearcoat
                    ior: 2.5, // –ò–Ω–¥–µ–∫—Å –Ω–∞ –ø—Ä–µ—á—É–ø–≤–∞–Ω–µ
                    reflectivity: 0.95,// –í–∏—Å–æ–∫–∞ –æ—Ç—Ä–∞–∂–∞—Ç–µ–ª–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç
                    emissiveIntensity: 0.2
                });
                child.material = metalMaterial;
            } else if (child.material.name === "Stone") {
                stoneMaterial = new THREE.MeshBasicMaterial({
                    map: textureLoader.load("textures/white.jpg"), // –ù–∞—á–∞–ª–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞ –∑–∞ –∫–∞–º—ä–∫
                    roughness: 0.1, // –ú–Ω–æ–≥–æ –≥–ª–∞–¥—ä–∫
                    metalness: 0.0, // –ù–µ–º–µ—Ç–∞–ª
                    //transmission: 0.5, // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç
                    opacity: 0.95, // –õ–µ–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç
                    transparent: true, // –ü—Ä–æ–∑—Ä–∞—á–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª
                    ior: 1.5, // –ò–Ω–¥–µ–∫—Å –Ω–∞ –ø—Ä–µ—á—É–ø–≤–∞–Ω–µ
                    //emissive: new THREE.Color(0xFFFFFF), // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ emissive –∑–∞ –ø–æ-—è—Ä—ä–∫ —Ü–≤—è—Ç
                    emissiveIntensity: 1, // –ò–Ω—Ç–µ–Ω–∑–∏–≤–Ω–æ—Å—Ç –Ω–∞ emissive
                    envMapIntensity: 1.5,
                    clearcoatRoughness: 0.5,
                    clearcoat: 1.0,
                    //emissive: new THREE.Color("#990000")
                });
                child.material = stoneMaterial;
            }
        }
    });

    // üéõÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–±–æ—Ä –Ω–∞ –º–µ—Ç–∞–ª–∞
    const metalTextures = {
        Gold: "textures/metal_gold.jpg",
        Silver: "textures/metal_silver.jpg",
        RoseGold: "textures/metal_rosegold.jpg"
    };

    document.querySelectorAll('.metal-option button').forEach(button => {
        button.addEventListener('click', () => {
            const metalType = button.getAttribute('data-metal');
            const texturePath = metalTextures[metalType];
            if (metalMaterial) {
                textureLoader.load(texturePath, (texture) => {
                    metalMaterial.map = texture; // –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞—Ç–∞
                    metalMaterial.needsUpdate = true; // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                });
            }
        });
    });

    // üéõÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑–±–æ—Ä –Ω–∞ –∫–∞–º—ä–∫–∞
    const stoneTextures = {
        "white": "textures/white.jpg",
        "blue_light": "textures/blue_light.jpg",
        "blue": "textures/blue.jpg",
        "blue_dark": "textures/blue_dark.jpg",
        "grey": "textures/grey.jpg",
        "green": "textures/green.jpg",
        "red": "textures/red.jpg",
        "yellow": "textures/yellow.jpg"
    };

    const stoneOpacity = {
        "white": 0.95, // –ë—è–ª —Ö–∞–ª—Ü–µ–¥–æ–Ω
        "blue_light": 1.0, // –°–≤–µ—Ç–ª–æ —Å–∏–Ω —Ö–∞–ª—Ü–µ–¥–æ–Ω
        "blue": 0.98, // –°–∏–Ω —Ö–∞–ª—Ü–µ–¥–æ–Ω
        "blue_dark": 0.93, // –¢—ä–º–Ω–æ —Å–∏–Ω —Ö–∞–ª—Ü–µ–¥–æ–Ω
        "grey": 0.98, // –°–∏–≤ —Ö–∞–ª—Ü–µ–¥–æ–Ω
        "yellow": 1.0, // –ñ—ä–ª—Ç —è—Å–ø–∏—Å
        "red": 1.0, // –ß–µ—Ä–≤–µ–Ω —è—Å–ø–∏—Å
        "green": 1.0  // –ó–µ–ª–µ–Ω —è—Å–ø–∏—Å
    };
    
    document.querySelectorAll('.stone-option button').forEach(button => {
        button.addEventListener('click', () => {
            const stoneColor = button.getAttribute('data-stone');
            const texturePath = stoneTextures[stoneColor];
    
            if (stoneMaterial) {
                textureLoader.load(texturePath, (texture) => {
                    stoneMaterial.map = texture; // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞—Ç–∞
                    stoneMaterial.color.set(0xffffff); // –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ü–≤—è—Ç –Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞—Ç–∞
                    
                    // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ opacity —Å–ø–æ—Ä–µ–¥ –∏–∑–±—Ä–∞–Ω–∏—è –∫–∞–º—ä–∫
                    stoneMaterial.opacity = stoneOpacity[stoneColor] || 1.0; 
                    stoneMaterial.transparent = stoneMaterial.opacity < 1.0; // –ê–∫–æ opacity –µ 1, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—Ç–∞ —Å–µ –∏–∑–∫–ª—é—á–≤–∞
    
                    stoneMaterial.needsUpdate = true; // –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                });
            }
        });
    });
    
    

    animate();
});

// üîÑ –ê–Ω–∏–º–∞—Ü–∏—è
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}

// üìè –ü—Ä–µ–æ—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ
window.addEventListener("resize", () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});